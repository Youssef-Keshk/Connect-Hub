package frontend;

import authenticators.Validator;
import java.awt.Color;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import entities.User;
import entities.Profile;
import databases.FilePaths;
import java.time.format.DateTimeParseException;
import managers.AccountManager;

public class SignupPanel extends javax.swing.JPanel {
    private final MainFrame parent;
    private final AccountManager accountManager;
    private String username;
    private String email;
    private String password;
    private String confirmedPassword;
    private LocalDate dateOfBirth;
    
    public SignupPanel(MainFrame parent) {
        this.parent = parent;
        this.accountManager = parent.getAccountManager();
        initComponents();
    }
    
    public void resetLabels() {
        usernameTextField.setText("Username");
        passwordField.setText("Password");
        emailTextField.setText("Email");
        confirmPasswordField.setText("Confirm password");
        dateOfBirthTextFeild.setText("Date of birth");
        showPasswordCheckBox.setSelected(false);
        passwordField.setEchoChar((char) 0); 
        confirmPasswordField.setEchoChar((char) 0); 
        
        usernameTextField.setForeground(Color.GRAY);
        passwordField.setForeground(Color.GRAY);
        emailTextField.setForeground(Color.GRAY);
        confirmPasswordField.setForeground(Color.GRAY);
        dateOfBirthTextFeild.setForeground(Color.GRAY);
    }
    
    public void startSignup() {
        resetLabels();
    }
    
    private void setValues() throws NullPointerException{
         
        username = usernameTextField.getText().trim();
        email = emailTextField.getText().trim();
        password = passwordField.getText().trim();
        confirmedPassword = confirmPasswordField.getText().trim();
        try {
        String date = dateOfBirthTextFeild.getText().trim();
        System.out.println("Input date: '" + date + "'");

        if (!date.isEmpty()) {
            dateOfBirth = LocalDate.parse(date, DateTimeFormatter.ISO_DATE);
            System.out.println("Parsed date: " + dateOfBirth);  // Debugging line
        } else {
            dateOfBirth = null;
        }
    } catch (DateTimeParseException e) {
        System.out.println("Error parsing date: " + e.getMessage());
        dateOfBirth = null; 
    }
 
        
    }
    
    public boolean validateData() throws NullPointerException{
        if(username.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Enter username!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if(!Validator.isValidEmail(email))
        {
            JOptionPane.showMessageDialog(null, "Invalid email!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(dateOfBirth == null)
        {
            JOptionPane.showMessageDialog(null, "Invalid date of birth!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!Validator.isValidPassword(password))
        {
            JOptionPane.showMessageDialog(null, "Password should be 4 or more characters!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!password.equals(confirmedPassword))
        {
            JOptionPane.showMessageDialog(null, "Invalid password confirmation!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    private Profile createProfile() {
        return  Profile.builder()
                .bio("")
                .coverPhotoPath(FilePaths.DEFAUL_USER_PHOTO)
                .profilePhotoPath(FilePaths.DEFAUL_USER_PHOTO)
                .build();
    }
    
    private User createUser(Profile profile){
        return   User.builder()
                 .username(username)
                 .email(email)
                 .dateOfBirth(dateOfBirth)
                 .password(password)
                 .profile(profile)
                 .build();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField()
        ;
        dateOfBirthTextFeild = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        confirmPasswordField = new javax.swing.JPasswordField();
        signupButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        showPasswordCheckBox = new javax.swing.JCheckBox();

        welcomLabel.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        welcomLabel.setForeground(new java.awt.Color(102, 0, 255));
        welcomLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomLabel.setText("Connect Hub");

        usernameTextField.setText("Username");
        usernameTextField.setForeground(Color.GRAY);
        usernameTextField.setBackground(new java.awt.Color(204, 204, 255));
        usernameTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        usernameTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 255), 1, true));

        emailTextField.setText("Email");
        emailTextField.setForeground(Color.GRAY);
        emailTextField.setBackground(new java.awt.Color(204, 204, 255));
        emailTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        emailTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 255), 1, true));

        dateOfBirthTextFeild.setText("Date of birth");
        dateOfBirthTextFeild.setForeground(Color.GRAY);
        dateOfBirthTextFeild.setBackground(new java.awt.Color(204, 204, 255));
        dateOfBirthTextFeild.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        dateOfBirthTextFeild.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 255), 1, true));

        passwordField.setBackground(new java.awt.Color(204, 204, 255));
        passwordField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        passwordField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 255), 1, true));
        passwordField.setText("Password");
        passwordField.setEchoChar((char) 0);
        passwordField.setForeground(Color.GRAY);

        confirmPasswordField.setBackground(new java.awt.Color(204, 204, 255));
        confirmPasswordField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        confirmPasswordField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 255), 1, true));
        confirmPasswordField.setText("Confirm password");
        confirmPasswordField.setEchoChar((char) 0);
        confirmPasswordField.setForeground(Color.GRAY);

        signupButton.setBackground(new java.awt.Color(102, 0, 255));
        signupButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        signupButton.setForeground(new java.awt.Color(255, 255, 255));
        signupButton.setText("Sign up");
        signupButton.setBorder(null);
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });

        loginButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        loginButton.setText("Already have an account? Login");
        loginButton.setBorderPainted(false);
        loginButton.setContentAreaFilled(false);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        showPasswordCheckBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        showPasswordCheckBox.setText("show password");
        showPasswordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(welcomLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(emailTextField)
                                        .addComponent(usernameTextField)
                                        .addComponent(dateOfBirthTextFeild)
                                        .addComponent(passwordField)
                                        .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(signupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(showPasswordCheckBox))))))
                .addContainerGap(152, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateOfBirthTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPasswordCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(signupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );

        welcomLabel.setFocusable(true);
        welcomLabel.requestFocusInWindow();
        usernameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (usernameTextField.getText().equals("Username")) {
                    usernameTextField.setText("");
                    usernameTextField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (usernameTextField.getText().isEmpty()) {
                    usernameTextField.setText("Username");
                    usernameTextField.setForeground(Color.GRAY);
                }
            }
        });
        emailTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (emailTextField.getText().equals("Email")) {
                    emailTextField.setText("");
                    emailTextField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (emailTextField.getText().isEmpty()) {
                    emailTextField.setText("Email");
                    emailTextField.setForeground(Color.GRAY);
                }
            }
        });
        dateOfBirthTextFeild.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (dateOfBirthTextFeild.getText().equals("Date of birth")) {
                    dateOfBirthTextFeild.setText("");
                    dateOfBirthTextFeild.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (dateOfBirthTextFeild.getText().isEmpty()) {
                    dateOfBirthTextFeild.setText("Date of birth");
                    dateOfBirthTextFeild.setForeground(Color.GRAY);
                }
            }
        });
        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (String.valueOf(passwordField.getPassword()).equals("Password")) {
                    passwordField.setText("");
                    if(!showPasswordCheckBox.isSelected())
                    passwordField.setEchoChar('•');
                    passwordField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (String.valueOf(passwordField.getPassword()).isEmpty()) {
                    passwordField.setText("Password");
                    passwordField.setEchoChar((char) 0);
                    passwordField.setForeground(Color.GRAY);
                }
            }
        });
        confirmPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (String.valueOf(confirmPasswordField.getPassword()).equals("Confirm password")) {
                    confirmPasswordField.setText("");

                    if(!showPasswordCheckBox.isSelected())
                    confirmPasswordField.setEchoChar('•');
                    confirmPasswordField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (String.valueOf(confirmPasswordField.getPassword()).isEmpty()) {
                    confirmPasswordField.setText("Confirm password");
                    confirmPasswordField.setEchoChar((char) 0);
                    confirmPasswordField.setForeground(Color.GRAY);
                }
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        parent.switchToLoginPage();
    }//GEN-LAST:event_loginButtonActionPerformed

    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed
        boolean success;
        try{
            setValues(); 
            success = validateData();
         if(!success)
             return;
        }catch(NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Some feilds are empty!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Profile profile = createProfile();
        User user = createUser(profile);
        
        success = accountManager.signup(user);
       
        if(success){
            parent.setUser(user);
            parent.switchToProfilePage();
        }
        else 
            JOptionPane.showMessageDialog(null, "Username or password already used!", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_signupButtonActionPerformed

    private void showPasswordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordCheckBoxActionPerformed
        if (showPasswordCheckBox.isSelected()) {
            passwordField.setEchoChar((char) 0);
            confirmPasswordField.setEchoChar((char) 0);
        } else {
            if(!passwordField.getText().equals("Password"))
                passwordField.setEchoChar('•');
            
            if(!confirmPasswordField.getText().equals("Confirm password"))
                confirmPasswordField.setEchoChar('•');
        }
    }//GEN-LAST:event_showPasswordCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JTextField dateOfBirthTextFeild;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JCheckBox showPasswordCheckBox;
    private javax.swing.JButton signupButton;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JLabel welcomLabel;
    // End of variables declaration//GEN-END:variables
}
